---
title: "sobol"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(sensitivity)
library(tidyverse)
library(gridExtra)
library(purrr)
library(ggpubr)
library(here)
```


# Sobol in R

* *Sensitivity* package

* Sobol Indices require estimation - and there are different methods to do that

* The *Sensitivity* package has several of those

* today we will use *sobolSalt* - which uses a method by Saltelli (who has written extensively on Sensitivity analysis)

* R help pages for *Sensitivity* provide many good references


# Sobol - how to

Similar workflow to LHS

* run Sobol to get parameter sets in a sensitivity analysis object
* run model with those parameter sets
* tell the senstivity object about results associated with each parameter set
* look at sensitivity analysis metric from Sobol

Generation of parameter sets slightly different

  * generate two samples of parameter sets by 
  samplng from apriori (expected) distributions
  * these would be the distributions you used for LHS

#  Example 
Atmospheric Conductance as a function of windspeed, vegetation height and parameters

```{r, setup}
source(here("R/Catm.R"))

# generate two examples of random number from parameter distributions

np <- 1000
k_o <- rnorm(mean = 0.1, sd = 0.1 * 0.1, n = np)
k_d <- rnorm(mean = 0.7, sd = 0.7 * 0.1, n = np)
v <- rnorm(mean = 250, sd = 30, n = np)
height <- runif(min = 9.5, max = 10.5, n = np)

X1 <- cbind.data.frame(k_o, k_d, v, height = height)

# repeat sampling
k_o <- rnorm(mean = 0.1, sd = 0.1 * 0.1, n = np)
k_d <- rnorm(mean = 0.7, sd = 0.7 * 0.1, n = np)
v <- rnorm(mean = 250, sd = 30, n = np)
height <- runif(min = 9.5, max = 10.5, n = np)

X2 <- cbind.data.frame(k_o, k_d, v, height = height)

# there are different versions of sobol functions that have different approaches for estimating parameters and indices, we use an approach implemented by jansen

sens_Catm_Sobol <- sobolSalt(model = NULL, X1, X2, nboot = 100)


# Take a look at the Sobol generated sensitivity object
# your parameters sets for sensitivity analysis are in X
```

# Sobol Indices

now run model for Sobol generated parameter sets and compute indices

* pay attention to values of the indices and confidence intervals
  * if 0 is within the confidence interval, parameter uncertainty is not influencing output
  
* substantial differences between total effect and first order indices suggest parameter interactions

TIP: a useful plotting strategy is to plot model output against parameter with the highest total effect
and then use the parameter with second highest total effect for color

```{r, sobolrun}
# run model for all parameter sets
# make sure you give the parameters names

parms <- as.data.frame(sens_Catm_Sobol$X)
colnames(parms) <- colnames(X1)
res <- pmap_dbl(parms, Catm)


sens_Catm_Sobol <- sensitivity::tell(sens_Catm_Sobol, res, res.names = "ga")

# main effect:  partitions variance (main effect without co-variance) - sums approximately to one
sens_Catm_Sobol$S
# useful to add names
row.names(sens_Catm_Sobol$S) <- colnames(parms)
sens_Catm_Sobol$S

# total effect - accounts for parameter interactions
row.names(sens_Catm_Sobol$T) <- colnames(parms)
sens_Catm_Sobol$T

# Both the main effect and total effect can tell us something about how the parameter influences results


print(sens_Catm_Sobol)
```

# Plotting

* uncertainty in the output

* relationships you are interested in

* response to most sensitive parameters

```{r, sobolplot}
# graph two most sensitive parameters
both <- cbind.data.frame(parms, gs = sens_Catm_Sobol$y)

# look at overall gs sensitvity to uncertainty
ggplot(both, aes(x = gs)) +
  geom_histogram() +
  geom_vline(xintercept = mean(both$gs), col = "cyan")

# look at response of conductance to the two interesting variables
ggplot(both, aes(v, gs, col = height)) +
  geom_point() +
  labs(y = "Conductance (mm/s)", x = "Windspeed")


# look at response of conductance to the two most important variables
ggplot(both, aes(k_d, gs, col = k_o)) +
  geom_point() +
  labs(y = "Conductance (mm/s)", x = "k_d parameter")
# use second most sensitive parameter (using most important as color)
ggplot(both, aes(k_o, gs, col = k_d)) +
  geom_point() +
  labs(y = "Conductance (mm/s)", x = "k_d parameter")
```


 

# Second order indices

Optional for this course

If you want to also compute a second order indices you need to use a different variation. (scheme=B)

There are multiple implementation of Sobol in the *senstivity* package, they can be more or less stable
I find *sobolSalt* works well

```{r, alternative}
sens_Catm_Sobol2 <- sobolSalt(model = NULL, X1, X2, nboot = 100, scheme = "B")

parms <- as.data.frame(sens_Catm_Sobol2$X)
colnames(parms) <- colnames(X1)
res <- pmap_dbl(parms, Catm)


sens_Catm_Sobol2 <- sensitivity::tell(sens_Catm_Sobol2, res, res.names = "ga")

# main effect:  partitions variance (main effect without co-variance) - sums approximately to one
row.names(sens_Catm_Sobol2$S) <- colnames(parms)
sens_Catm_Sobol2$S

# total effect - accounts for parameter interactions
row.names(sens_Catm_Sobol2$T) <- colnames(parms)
sens_Catm_Sobol2$T

# second order parameters interaction in controlling sensitivity
# parameters are in order, interactiosn are small here
sens_Catm_Sobol2$S2
```
