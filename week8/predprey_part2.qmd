---
title: "extended_preditor_prey"
format: html
editor: visual
---

# Code for Sobol with 2-variable dynamic model

```{r odesen}
source(here("R/lotvmodK.R"))
# lets start with sobol
library(sensitivity)


# want to learn about sensitivity to growth rate (r) and carrying capacity
# set the number of parameters
np <- 200
K <- rnorm(mean = 150, sd = 20, n = np)
rprey <- runif(min = 0.01, max = 0.3, n = np)
alpha <- runif(min = 0.1, max = 0.4, n = np)
eff <- rnorm(mean = 0.3, sd = 0.01, n = np)
pmort <- runif(min = 0.01, max = 0.45, n = np)

X1 <- cbind.data.frame(rprey = rprey, K = K, alpha = alpha, eff = eff, pmort = pmort)

# repeat to get our second set of samples
np <- 200
K <- rnorm(mean = 150, sd = 20, n = np)
rprey <- runif(min = 0.01, max = 0.3, n = np)
alpha <- runif(min = 0.1, max = 0.4, n = np)
eff <- rnorm(mean = 0.3, sd = 0.01, n = np)
pmort <- runif(min = 0.01, max = 0.45, n = np)

X2 <- cbind.data.frame(rprey = rprey, K = K, alpha = alpha, eff = eff, pmort = pmort)


# create our sobel object and get sets ofparameters for running the model
sens_PP <- sobolSalt(model = NULL, X1, X2, nboot = 300)

# name parameter sets...
colnames(sens_PP$X) <- c("rprey", "K", "alpha", "eff", "pmort")

# our metrics
# lets say we  want the maximum and minimum  of both predictor and prey

compute_metrics <- function(result) {
  maxprey <- max(result$prey)
  maxpred <- max(result$pred)
  minprey <- min(result$prey)
  minpred <- min(result$pred)
  return(list(maxprey = maxprey, minprey = minprey, maxpred = maxpred, minpred = minpred))
}

# build a wrapper function


p_wrapper <- function(rprey, alpha, eff, pmort, K, currpop, days, func) {
  parms <- list(rprey = rprey, alpha = alpha, eff = eff, pmort = pmort, K = K)
  result <- ode(y = currpop, times = days, func = func, parms = parms)
  colnames(result) <- c("time", "prey", "pred")
  # get metrics
  metrics <- compute_metrics(as.data.frame(result))
  return(metrics)
}

```

## Now run wrapper for all parameters {.scrollable}

-   graph
-   sobol indices

```{r odesen2}
# run our model for all parameters and extract the results
currpop <- c(prey = 1, pred = 1)
days <- seq(from = 1, to = 500)
allresults <- as.data.frame(sens_PP$X) %>% pmap(p_wrapper, currpop = currpop, days = days, func = lotvmodK)

# take results back to unlisted form
allres <- allresults %>% map_dfr(`[`, c("maxprey", "minprey", "maxpred", "minpred"))


# range of response across parameter uncertainty
allresl <- allres %>% gather(key = "metric", value = "pop")
ggplot(allresl, aes(metric, pop)) +
  geom_boxplot()

# dealing with different scales
ggplot(allresl, aes(metric, pop, col = metric)) +
  geom_boxplot() +
  facet_wrap(~metric, scales = "free")
# plot cummulative densities

ggplot(allresl, aes(pop, col = metric)) +
  stat_ecdf(geom = "line") +
  facet_wrap(~metric, scales = "free")

# create sobol indices for Max Prey
sens_PP_maxprey <- sens_PP %>% sensitivity::tell(y = allres$maxprey)
rownames(sens_PP_maxprey$S) <- c("rprey", "K", "alpha", "eff", "pmort")
sens_PP_maxprey$S
rownames(sens_PP_maxprey$T) <- c("rprey", "K", "alpha", "eff", "pmort")
sens_PP_maxprey$T
```

```{r}
# create sobol indices for Max Prey
sens_PP_maxpred <- sens_PP %>% sensitivity::tell(y = allres$maxpred)
rownames(sens_PP_maxpred$S) <- c("rprey", "K", "alpha", "eff", "pmort")
sens_PP_maxpred$S
rownames(sens_PP_maxpred$T) <- c("rprey", "K", "alpha", "eff", "pmort")
sens_PP_maxpred$T
```

# Think about how to compute for

```         
-   maximum prey
-   minimum prey
-   maximum predator
-   minimum predator
```

# Model with varyng carrying capacity

```{r}
source(here("R/lotvmodvaryingK.R"))
lotvmodKvar




# initial conditions
currpop <- c(prey = 10, pred = 1)



# set parameters and inputs
# read in air temperature time series
airT = readRDS(here("Data/Tavg_Rattlesnake.RDS"))
head(airT)
#note if you were interested in specific periods you might want to subset this data

# time points to see results
days <- seq(from = 1, to = length(airT$tavg), by = 1)

# note you have to use a list now because elements are of a different length
pars <- list(rprey = 0.5, alpha = 0.3, eff = 0.2, pmort = 0.2, KO= 100, Topt=18, Ksen=0.3, airT=airT$tavg)

# run the model
res <- ode(func = lotvmodKvar, y = currpop, times = days, parms = pars)
# graph the results
head(res)
# rearrange for easy plotting
resl <- as.data.frame(res) %>% pivot_longer(-time, names_to = "animal", values_to = "pop")
p1 <- ggplot(resl, aes(time, pop, col = animal)) +
  geom_line()

p1


p2 <- ggplot(as.data.frame(res), aes(pred, prey)) +
  geom_point() +
  labs(y = "Prey", x = "Predators")
p2

# To make this easier to understand - maybe
p2b <- ggplot(as.data.frame(res), aes(pred, prey, col = time)) +
  geom_point() +
  labs(y = "Prey", x = "Predators")
p2b

ggarrange(p1, p2b)
```

# Code for model with air temperature

```{r, varyK}
source(here("R/lotvmodvaryingK.R"))
lotvmodKvar




# initial conditions
currpop <- c(prey = 10, pred = 1)



# set parameters and inputs
# read in air temperature time series
airT = readRDS(here("Data/Tavg_Rattlesnake.RDS"))
head(airT)
#note if you were interested in specific periods you might want to subset this data

# time points to see results
days <- seq(from = 1, to = length(airT$tavg), by = 1)

# note you have to use a list now because elements are of a different length
pars <- list(rprey = 0.5, alpha = 0.3, eff = 0.2, pmort = 0.2, KO= 100, Topt=18, Ksen=0.3, airT=airT$tavg)

# run the model
res <- ode(func = lotvmodKvar, y = currpop, times = days, parms = pars)
# graph the results
head(res)
# rearrange for easy plotting
resl <- as.data.frame(res) %>% pivot_longer(-time, names_to = "animal", values_to = "pop")
p1 <- ggplot(resl, aes(time, pop, col = animal)) +
  geom_line()

p1


p2 <- ggplot(as.data.frame(res), aes(pred, prey)) +
  geom_point() +
  labs(y = "Prey", x = "Predators")
p2

# To make this easier to understand - maybe
p2b <- ggplot(as.data.frame(res), aes(pred, prey, col = time)) +
  geom_point() +
  labs(y = "Prey", x = "Predators")
p2b

ggarrange(p1, p2b)
```
